package com.csy.design.factory.v1.simple;

/**
 * 简单工单模式测试
 * @author : chensy
 * Date : 2020/11/17 下午1:13
 */
public class Z_Test {
    public static void main(String[] args) throws Exception {
        Product car = ProductFactory.getProduct("car");
        Product tv = ProductFactory.getProduct("tv");
    }

    /**
     * 工厂模式专门负责将大量有共同接口的类实例化。工厂模式可以动态决定将哪一个类实例化，不必事先知道每次要实例化哪一个类。
     * 工厂模式的几种形态：
     * （1）简单工厂（Simple Factory）模式，又称静态工厂方法模式（Static Factory Method Pattern）。
     * （2）工厂方法（Factory Method）模式，又称多态性工厂（Polymorphic Factory）模式或虚拟构造子（Virtual Constructor）模式；
     * （3）抽象工厂（Abstract Factory）模式，又称工具箱（Kit 或Toolkit）模式。
     *
     * https://www.jianshu.com/p/bf8341c75304
     * 简单工厂模式:
     * 简单工厂模式(Simple Factory Pattern)：又称为静态工厂方法(Static Factory Method)模式，
     * 它属于类创建型模式。在简单工厂模式中，可以根据自变量的不同返回不同类的实例
     *
     * 角色：
     * （1）工厂类（Creator）角色：担任这个角色的是工厂方法模式的核心，含有与应用紧密相关的商业逻辑。工厂类在客户端的直接调用下创建产品对象，它往往由一个具体Java 类实现。
     * （2）抽象产品（Product）角色：担任这个角色的类是工厂方法模式所创建的对象的父类，或它们共同拥有的接口。抽象产品角色可以用一个Java 接口或者Java 抽象类实现。
     * （3）具体产品（Concrete Product）角色：工厂方法模式所创建的任何对象都是这个角色的实例，具体产品角色由一个具体Java 类实现
     *
     * 简单工厂模式的优点如下：
     * （1）工厂类含有必要的判断逻辑，可以决定在什么时候创建哪一个产品类的实例，客户端可以免除直接创建产品对象的责任，而仅仅“消费”产品；简单工厂模式通过这种做法实现了对责任的分割，它提供了专门的工厂类用于创建对象。
     * （2）客户端无需知道所创建的具体产品类的类名，只需要知道具体产品类所对应的参数即可，对于一些复杂的类名，通过简单工厂模式可以减少使用者的记忆量。
     * （3）通过引入配置文件，可以在不修改任何客户端代码的情况下更换和增加新的具体产品类，在一定程度上提高了系统的灵活性。

     * 简单工厂模式的缺点如下：
     * （1）由于工厂类集中了所有产品创建逻辑，一旦不能正常工作，整个系统都要受到影响。
     * （2）使用简单工厂模式将会增加系统中类的个数，在一定程序上增加了系统的复杂度和理解难度。
     * （3）系统扩展困难，一旦添加新产品就不得不修改工厂逻辑，在产品类型较多时，有可能造成工厂逻辑过于复杂，不利于系统的扩展和维护。
     * （4）简单工厂模式由于使用了静态工厂方法，造成工厂角色无法形成基于继承的等级结构。
     */
}
